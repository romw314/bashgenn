#!/bin/bash

color_term=false
case "$TERM" in
	*-256color|xterm-color)
		color_term=true;;
esac

_tc() { "$color_term"; }
echom() { _tc && echo -ne "\x1B[0;36mmessage:\x1B[0m " || echo -n "message: "; echo "$@"; }
warn() { _tc && echo -ne "\x1B[0;33mwarning:\x1B[0m " || echo -n "warning: "; echo "$@"; }
error() { _tc && echo -ne "\x1B[0;31merror:\x1B[0m " || echo -n "error: "; echo "$@"; exit; }

if [ -t 0 -o $# -gt 0 ]; then
	sleep 0.01
	stdm=`cat "$@"`
	sleep 0.7
	echo "$stdm" | "$0"
	sleep 1
	exit
fi

CONST="dd6bashgennCONST_STORECONST_IN_BASHGENN_TO_ebf00ddf_933f_464f_a18f_f08c81a9069e_"

echo "Initializing bg-f..."
true >bg-f
ebgf() { echo "$@" >>"bg-f"; }
ireq() { [[ "$BASHGENN" == *"[ireq=true]"* ]] && ebgf "$@" || error "line $line: IReq is not enabled"; }
vars() {
	FIRST="echo \"\${VR_$p1:0:1}\" && VR_$p1=\"\${VR_$p1:1}\""
	LAST="echo \"\${VR_$p1:\$((\${#VR_$p1}-1)):1}\" && VR_$p1=\"\${VR_$p1:0:\$((\${#VR_$p1}-1))}\""
	CHINC="awk \"BEGIN{printf(\\\"%c\\\",\$(printf %d \"'\${VR_$p1}\")+1)}\""
	CHDEC="${CHINC/+1/-1}"
	STRRANGE="while test \$(printf %d \"'\${VR_$p1}\") -gt \$(printf %d \"'\${VR_$p2}\"); do"
}

ebgf "#!$(which env) -S bash"

line=0
while read cmd p1 p2; do
	let line++
	[ "${cmd:0:1}" = "_" ] || echo "Processing $cmd at line $line..."
	if [[ "$cmd" != "CONST_SET" ]]; then
		if  [[ "$BASHGENN" != *"[strict=none]"* ]]; then
			if test -n "$(echo "$cmd $p1 $p2" | tr -d 'a-zA-Z0-9_ ')"; then
				[[ "$BASHGENN" == *"[strict=warn]"* ]] && type=warn || type=error
				"$type" "line $line: command contains invalid characters"
			fi
		fi
	fi
	vars
	case "$cmd" in
		# Runtime commands
		READ) ebgf "read VR_$p1";;
		STDIN) ebgf "while read VR_$p1;do";;
		STRGET) ebgf "while test -n \"\${VR_$p1}\";do";;
		ECHO) ebgf "echo \"\${VR_$p1}\"";;
		NONL) ebgf "echo -n \"\${VR_$p1}\"";;
		COPY) ebgf "VR_$p1=\"\${VR_$p2}\"";;
		STOP) ebgf "exit $p1";;
		KILL) ebgf "kill \$\$";;
		DONE) ebgf "done";;
		REPEAT) ebgf "for To$(date +%N) in \$(seq 1 1 $p1);do";;
		FIRST) ebgf "$FIRST";;
		LAST) ebgf "$LAST";;
		STOREFIRST) ebgf "${FIRST/"echo "/"VR_$p2="}";;
		STORELAST) ebgf "${LAST/"echo "/"VR_$p2="}";;
		CHINC) ebgf "$CHINC";;
		CHDEC) ebgf "$CHDEC";;
		STORECHINC) ebgf "VR_$p2=\"\$($CHINC)\"";;
		STORECHDEC) ebgf "VR_$p2=\"\$($CHDEC)\"";;
		STRRANGE) ebgf "$STRRANGE";;
		STRRANGELESS) ebgf "${STRRANGE/-gt/-lt}";;
		STRCAT) ebgf "VR_$p2=\"\${VR_$p2}\${VR_$p1}\"";;
		FIND) ebgf "Rto=\"\${VR_$p1#*\"\${VR_$p2}\"}\"&&echo \$((\${#VR_$p1}-\${#Rto}-\${#VR_$p2}))";;
		CONST_SET|CONSTSET) ebgf "${CONST}$p1='$p2'";;
		CONST_SCAN|CONSTSCAN) ebgf "tempc_$p1=\"\${${CONST}$p1}\"&&while test \${#tempc_$p1} -gt 0;do VR_$p2=\"\${tempc_$p1:\$((\${#tempc_$p1}-1)):1}\" && tempc_$p1=\"\${tempc_$p1:0:\$((\${#tempc_$p1}-1))}\"";;

		# IReq runtime commands
		RREPT) ireq "for To$(date +%N) in \$(seq 1 1 \${VR_$p1});do";;
		CONST_COPY|CONSTCOPY) ireq "VR_$p1=\"\${$CONST$p1}\"";;

		# Compiler directives
		_MSG) [ -n "$p2" ] && p2=" $p2"; echom "_MSG: '$p1$p2'";;
		_ERR) [ -n "$p2" ] && p2=" $p2"; error "_ERR: '$p1$p2'";;
		_OPT) BASHGENN="${BASHGENN/\[$p1=*\]/""}" && BASHGENN="$BASHGENN[$p1=$p2]";;

		# Error: invalid command
		_*) error "$cmd: invalid compiler directive";;
		*) error "$cmd: invalid command";;
	esac
	sleep 0.05
done

sleep 0.5
echo "Making bg-f executable..."
chmod a+x bg-f
